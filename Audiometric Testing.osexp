---
API: 2.1
OpenSesame: 3.3.14
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set round_decimals 2
set psychopy_waitblanking yes
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "C:\\gitRepos\\Audiometric-Testing-Interface"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set canvas_backend psycho
set background black

define form_text_display Instructions
	set timeout infinite
	set spacing 10
	set rows "1;4;1"
	set only_render no
	set ok_text Ok
	set margins "50;50;50;50"
	set form_title "<span size=24>Instructions</span>"
	__form_text__
	Welcome to the audiogram. In this task, press the BLUE button whenever you hear a sound. There will be some long stretches when you don't hear any sounds. Press the BLUE button to continue.
	__end__
	set description "A simple text display form"
	set cols "1;1;1"
	set _theme gray
	widget 0 0 3 1 label text="[form_title]"
	widget 0 1 3 1 label center=no text="[form_text]"
	widget 1 2 1 1 button text="[ok_text]"


define inline_script MainAudiometricTestingPythonScript
	set description "Executes Python code"
	set _run ""
	set _prepare ""

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run Instructions always
	run inline_script always

define notepad getting_started
	__note__
	Welcome to OpenSesame 3.3 "Lentiform Loewenfeld"!
	If you are new to OpenSesame, it is a good idea to follow one of the tutorials,
	which can be found on the documentation site:
	- <http://osdoc.cogsci.nl/>
	You can also check out the examples. These can be opened via:
	- Menu -> Tools -> Example experiments.
	And feel free to ask for help on the forum:
	- <http://forum.cogsci.nl/>
	Have fun with OpenSesame!
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define inline_script inline_script
	set description "Executes Python code"
	___run__
	from openexp.canvas import Canvas
	import pygame.mixer as mixer
	import random
	
	mixer.init()
	sound_file = 'C:\\Downloads\\audiometric_testing\\250Hz_44100Hz_16bit_05sec.mp3'
	mixer.music.load(sound_file)
	# print("a")
	
	# # Create a canvas object
	# my_canvas = Canvas(exp)
	
	# my_canvas.text("testing")
	
	
	# my_canvas.show()
	# print("d")
	
	
	# clock.sleep(1000)
	
	# # Import the necessary modules
	
	
	# # Initialize the mixer
	# mixer.init()
	
	# # Load the sound file
	# sound_file = 'C:\\Downloads\\audiometric_testing\\250Hz_44100Hz_16bit_05sec.mp3'
	# mixer.music.load(sound_file)
	
	# # Play the sound
	# mixer.music.play()
	# # Import the necessary modules
	# my_keyboard = Keyboard(keylist=['z', 'x'], timeout=1000)
	# start_time = clock.time()
	# key, end_time = my_keyboard.get_key()
	# var.response = key
	# var.response_time = end_time - start_time
	
	
	# my_canvas = Canvas(exp)
	
	# my_canvas.text(key)
	
	
	# my_canvas.show()
	
	# clock.sleep(1000)
	
	#This script contains the relavant OpenSesame commands
	
	#This script contains the relavant OpenSesame commands
	
	freqs = list(range(1000, 2001, 1000))
	# freqs.append(500)
	# freqs.append(250)
	scores = {}
	
	my_canvas = Canvas(exp)
	
	my_canvas.text("running prototype...")
	
	
	my_canvas.show()
	clock.sleep(1000)
	
	mixer.init()
	
	for freq in freqs:
	    
	    hits = {}
	    attempts = {}
	    # print(hits)
	    # print(attempts)
	    hits[0] = 0 #probably dont need these anymore
	    attempts[0] = 0
	    amp = 0
	    
	    #This starts as False because we want to first trial to count
	    new_ascending_presentation = False 
	    #When it is True, that means we just went down 10 dbs, and we
	    #dont want to count the next presentation as a hit or an attempt
	
	    prev_hit = False
	    attempts[-5] = 0
	    while (prev_hit and attempts[amp+10] < 3) or (prev_hit and attempts[amp+10] >= 3 and hits[amp+10] / attempts[amp+10] < .5) or (not prev_hit and attempts[amp-5] < 3) or (not prev_hit and attempts[amp-5] >= 3 and hits[amp-5] / attempts[amp-5] < .5):
	        prev_hit = False
	       
	        if amp <= 0:
	            prefix = 'm'
	        else:
	            prefix = 'p'
	        if abs(amp) < 10:
	            str_amp = '0' + str(abs(amp))
	        else:
	            str_amp = str(abs(amp))
	            
	        
	        
	        sound_path ='Z:\\Lab_Members\\Ryan\\OpenAudiometer\\stimuli\\' + str(freq) + '_'+ prefix + str_amp + '.wav'
	        # sound_path = 'C:\\Downloads\\audiometric_testing\\stimuli\\'+str(freq)+'hz'+str(amp)+'db.wav'
	        # sound_file = 'C:\\Downloads\\audiometric_testing\\250Hz_44100Hz_16bit_05sec.mp3'
	        sound = mixer.Sound(sound_path)
	       
	        sound.play()
	        
	        my_canvas = Canvas(exp)
	        
	        my_canvas.text("Playing frequency "+str(freq)+  "hz at amplitude of " +str(amp) + "db")
	        my_canvas.show()
	        
	        
	        #wait for sound to finish playing (each should be 1 sec)
	        clock.sleep(1000)
	    
	        
	        
	        my_keyboard = Keyboard(keylist=['5'], timeout=3000)
	        user_input, end_time = my_keyboard.get_key()
	        
	        my_canvas = Canvas(exp)
	        my_canvas.text(user_input)
	        my_canvas.show()
	        
	        if not new_ascending_presentation:
	            if amp in attempts:
	                attempts[amp] +=1
	            else:
	                attempts[amp] =1
	        if user_input == "5":
	            if not new_ascending_presentation:
	                if amp in hits:
	                    hits[amp] += 1
	                else:
	                    hits[amp] = 1
	            prev_hit = True
	            amp -= 10
	            new_ascending_presentation = True
	        else:
	            if amp not in hits:
	                hits[amp] = 0
	            amp += 5
	            new_ascending_presentation = False
	        if amp not in attempts:
	            attempts[amp] = 0
	            
	            
	            
	        #wait between presentations 2 seconds +- 1 second
	       
	        random_wait = random.randint(2000, 4000)
	        clock.sleep(random_wait)
	        
	        # print(attempts)
	        # print(hits)
	        
	        # print("prev_hit",prev_hit)
	        # print("hits",hits)
	        # print("attempts",attempts)
	        # if(prev_hit):
	        #     print(prev_hit and attempts[amp+10] < 3)
	        #     print(prev_hit and attempts[amp+10] >= 3 and hits[amp+10] / attempts[amp+10] < .5)
	        # else:
	        #     print(not prev_hit and attempts[amp-5] < 3)
	        #     print(not prev_hit and attempts[amp-5] >= 3 and hits[amp-5] / attempts[amp-5] < .5)
	    if prev_hit:
	        scores[str(freq)+"hz"] = str(amp+10)+"db"
	    else:
	        scores[str(freq)+"hz"] = str(amp-5)+"db"
	    print(scores)
	    
	import csv
	
	
	# Create a list of the keys and values in the dictionary
	keys = list(scores.keys())
	values = list(scores.values())
	
	# Open the CSV file for writing
	with open('C:\\gitRepos\\Audiometric-Testing-Interface\\output.csv', 'w', newline='') as csvfile:
	
	    # Create a writer object
	    writer = csv.writer(csvfile)
	
	    # Write the header row
	    writer.writerow(['Frequency', 'Amplitude'])
	
	    # Write the data rows
	    for i in range(len(keys)):
	        writer.writerow([keys[i][:-2], values[i]])
	
	import pandas as pd
	import matplotlib.pyplot as plt
	
	# Read the CSV file into a Pandas DataFrame
	df = pd.read_csv('C:\\gitRepos\\Audiometric-Testing-Interface\\output.csv')
	fig = plt.figure(figsize=(10,6))
	
	# fig = plt.figure(figsize=(15, 20))
	# Plot the data as a scatter plot
	ax = plt.gca()
	ax.scatter(df['Frequency'], df['Amplitude'])
	ax.set_ylabel('Amplitude (dB)')
	ax.set_xlabel('Frequency (Hz)')
	ax.xaxis.set_label_coords(.5, 1.06)
	ax.set_ylim(-25, 30)
	
	ax.axhline(y=25, linestyle='--', color='gray')
	
	# Add text to the right of the horizontal line
	ax.text(x=-1800, y=25, s='Beginning of hearing loss', va='center', ha='left', fontsize=6)
	
	
	# Set the x- and y-axis labels
	# plt.xlabel('Frequency (Hz)')
	# plt.xaxis.set_label_coords(.5, 1)
	# x_label = plt.gca().xaxis.get_label()
	# x_label.set_position((0.5, 1.08))
	# x_label.set_y(1.05)
	# plt.ylabel('Amplitude (dB HL)')
	
	# Set the plot title
	plt.title('Audiogram',y=1.1)
	plt.tick_params(axis='x', which='both', top=True)
	ax.xaxis.set_ticks_position('top')
	ax.xaxis.set_label_position('top')
	ax.invert_yaxis()
	# Show the plot
	
	
	# plt.figure(fig)
	plt.show()
	
	plt.savefig('C:\\gitRepos\\Audiometric-Testing-Interface\\audiogram.png')
	
	    
	
	       
	__end__
	set _prepare ""

define inline_script new_inline_script
	set description "Executes Python code"
	set _run ""
	set _prepare ""

define inline_script new_inline_script_1
	set description "Executes Python code"
	___run__
	scores = {'1000hz':10,'2000hz':15}
	# for score in scores:
	#     log.write(score[:-2],str(scores[score]))
	    
	# Import the necessary modules
	import csv
	
	
	# Create a list of the keys and values in the dictionary
	keys = list(scores.keys())
	values = list(scores.values())
	
	# Open the CSV file for writing
	with open('C:\\gitRepos\\Audiometric-Testing-Interface\\output.csv', 'w', newline='') as csvfile:
	
	    # Create a writer object
	    writer = csv.writer(csvfile)
	
	    # Write the header row
	    writer.writerow(['Frequency', 'Amplitude'])
	
	    # Write the data rows
	    for i in range(len(keys)):
	        writer.writerow([keys[i][:-2], values[i]])
	
	import pandas as pd
	import matplotlib.pyplot as plt
	
	# Read the CSV file into a Pandas DataFrame
	df = pd.read_csv('C:\\gitRepos\\Audiometric-Testing-Interface\\output.csv')
	
	# Plot the data as a scatter plot
	fig, ax = plt.subplots()
	ax.scatter(df['Frequency'], df['Amplitude'])
	ax.set_ylabel('Amplitude (dB)')
	ax.set_xlabel('Frequency (Hz)')
	ax.xaxis.set_label_coords(.5, 1.04)
	
	
	# Set the x- and y-axis labels
	# plt.xlabel('Frequency (Hz)')
	# plt.xaxis.set_label_coords(.5, 1)
	# x_label = plt.gca().xaxis.get_label()
	# x_label.set_position((0.5, 1.08))
	# x_label.set_y(1.05)
	# plt.ylabel('Amplitude (dB HL)')
	
	# Set the plot title
	plt.title('Audiogram',y=1.08)
	plt.tick_params(axis='x', which='both', top=True)
	ax.xaxis.set_ticks_position('top')
	ax.xaxis.set_label_position('top')
	# Show the plot
	plt.figure(figsize=(10,6))
	plt.show()
	
	plt.savefig('C:\\gitRepos\\Audiometric-Testing-Interface\\audiogram.png')
	__end__
	set _prepare ""

define sketchpad new_sketchpad
	set duration keypress
	set description "Displays stimuli"

define sketchpad welcome
	set start_response_interval no
	set reset_variables no
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="OpenSesame 3.3 <i>Lentiform Loewenfeld</i>" x=-8 y=-32 z_index=0

